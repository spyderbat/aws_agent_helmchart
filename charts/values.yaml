# Default values for aws_agent_helmchart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Image location for the Spyderbat AWS agent
image:
  registry: public.ecr.aws
  # Full image
  repository: a6j2k0g1/aws-agent
  tag: latest
  pullPolicy: Always
  pullSecrets: []


# Reasonable resource defaults.  May need to be larger for particularly large aws environments
resources:
  requests:
    cpu: 100m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 2048Mi

# Our recommended approach for managing the aws api credentials is to use
# a kubernetes service accounts that assumes an IAM role.
serviceAccount:
  # Set enabled to true if you want to create a service account for the agent and have
  # it assume an AWS role for interacting with AWS (recommended)
  enabled: true

  # Set create to true if you want the helm chart to create the service account for you
  create: true

  # The name of the service account to use (or create)
  name: aws-agent-serviceaccount

  # Use the below annotation for EKS based clusters to associate the service account with an IAM role
  awsRoleAnnotation: eks.amazonaws.com/role-arn
  # Provide the ARN to the role with the appropriate trust policy and
  # permissions to interact with AWS services that the service account will assume
  awsRoleArn: arn of the IAM role that the service account should assume


# Our recommended approach for managing the spyderbat api key is to use aws secrets manager
# to store the key. If you choose to use this approach, set enabled to true and
# specify the secret arn where the spyderbat api key is stored. The
awsSecretsManager:
  enabled: false
  secretArn: <arn of the secret in secrets manager that has the spyderbat api key>

credentials:
  # Our recommended approach for aws credential management is to use
  # a service account that assumes an IAM role (see serviceAccount above).
  # However, optionally you can specify the aws credentials to use for the
  # agent explicitly here. We recommend setting these with the
  # --set option during helm install rather than storing them in the values.yaml
  # aws_access_key_id:
  # aws_secret_access_key:

  # Our recommended approach for accessing the spyderbat registration key is
  # to use a secret manager like awsSecretsManager. However, if you are not
  # running in aws or choose not to use it, the spyderbat_registration_key can be managed
  # in a kubernetes secret as well. If you choose to do so, you can specify the
  # key in this setting. We recommend setting this with the --set option during
  # helm install, and not storing it in the values.yaml
  spyderbat_registration_key: <spyderbat registration key>

# The spyderbat api url
spyderbat_orc_url: https://orc.spyderbat.com

# If the agent is installed on a cluster, you can provide the cluster_name
# here. This is useful for understanding where the agent is running
# when looking at agent health and data sources in the spyderbat ui
# cluster_name: my-cluster

# Agent aws service collection settings
awsAgentsConfigs:
  - aws_account_id: auto





